---
import Layout from '../../layouts/Layout.astro';

// Get all blog posts
const allPosts = await Astro.glob('../blog/*.{md,mdx}');

// Sort posts by date
const posts = allPosts.sort((a, b) => {
  return new Date(b.frontmatter.date).valueOf() - new Date(a.frontmatter.date).valueOf();
});

// Get all unique tags
const allTags = [...new Set(posts.flatMap(post => post.frontmatter.tags || []))].sort();

// Group posts by year
const postsByYear = posts.reduce((acc, post) => {
  const year = new Date(post.frontmatter.date).getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {} as Record<number, typeof posts>);

const years = Object.keys(postsByYear).sort().reverse();
---

<Layout title="Writing | Sambulo Senda">
  <main class="min-h-screen pt-24 md:pt-32 pb-16 md:pb-24">
    <div class="max-w-4xl mx-auto px-6 md:px-4">
      <header class="mb-10 md:mb-16">
        <h1 class="text-3xl md:text-4xl font-bold mb-4 md:mb-6">Writing</h1>
        <p class="text-base md:text-lg text-gray-600 dark:text-gray-400 max-w-2xl">
          Thoughts, tutorials, and insights about mobile development and React Native.
        </p>
      </header>



      {/* Posts listing */}
      <div class="space-y-16 md:space-y-24" id="posts-container">
        {years.map(year => (
          <section>
            <div class="space-y-12 md:space-y-16">
              {postsByYear[year].map(post => (
                <article 
                  class="group"
                  data-tags={JSON.stringify(post.frontmatter.tags || [])}
                >
                  <a href={post.url} class="block">
                    <h3 class="text-lg md:text-xl font-medium mb-3 md:mb-4 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                      {post.frontmatter.title}
                    </h3>
                    
                    {post.frontmatter.description && (
                      <p class="text-gray-600 dark:text-gray-400 mb-3 md:mb-4 line-clamp-2 text-sm md:text-base">
                        {post.frontmatter.description}
                      </p>
                    )}
                    
                    <div class="flex flex-wrap items-center gap-3 md:gap-4 text-xs md:text-sm text-gray-600 dark:text-gray-400">
                      <time datetime={post.frontmatter.date} class="flex items-center gap-1.5 md:gap-2">
                        <svg class="w-3.5 h-3.5 md:w-4 md:h-4" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                        </svg>
                        {new Date(post.frontmatter.date).toLocaleDateString('en-US', {
                          month: 'long',
                          day: 'numeric'
                        })}
                      </time>
                      
                      {post.frontmatter.readingTime && (
                        <span class="flex items-center gap-1.5 md:gap-2">
                          <svg class="w-3.5 h-3.5 md:w-4 md:h-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
                          </svg>
                          {post.frontmatter.readingTime}
                        </span>
                      )}

                      {post.frontmatter.tags && (
                        <div class="flex flex-wrap gap-1.5 md:gap-2">
                          {post.frontmatter.tags.slice(0, 2).map(tag => (
                            <span class="text-xs px-2 md:px-3 py-0.5 md:py-1 bg-gray-100 dark:bg-gray-800 rounded-full">
                              {tag}
                            </span>
                          ))}
                          {post.frontmatter.tags.length > 2 && (
                            <span class="text-xs text-gray-500 dark:text-gray-400">
                              +{post.frontmatter.tags.length - 2}
                            </span>
                          )}
                        </div>
                      )}
                    </div>
                  </a>
                </article>
              ))}
            </div>
          </section>
        ))}
      </div>

      {/* Empty state */}
      <div 
        id="empty-state" 
        class="hidden text-center py-12 md:py-16 text-gray-600 dark:text-gray-400"
      >
        <p class="text-base md:text-lg mb-2">No posts found</p>
        <p class="text-sm">Try selecting a different tag</p>
      </div>
    </div>
  </main>
</Layout>

<style>
  .tag-filter.selected {
    @apply bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400;
  }

  @media (hover: hover) {
    article {
      @apply transition-transform duration-200;
    }
    
    article:hover {
      @apply -translate-y-0.5;
    }
  }

  /* Hide scrollbar but keep functionality */
  .overflow-x-auto {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .overflow-x-auto::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  function setupTagFilters() {
    const tagFilters = document.querySelectorAll('.tag-filter');
    const postsContainer = document.getElementById('posts-container');
    const emptyState = document.getElementById('empty-state');
    const articles = document.querySelectorAll('article');
    
    function filterPosts(tag: string) {
      let hasVisiblePosts = false;
      
      articles.forEach(article => {
        const tags = JSON.parse(article.dataset.tags || '[]');
        const shouldShow = tag === 'all' || tags.includes(tag);
        article.style.display = shouldShow ? 'block' : 'none';
        if (shouldShow) hasVisiblePosts = true;
      });
      
      // Show/hide empty state
      if (emptyState) {
        emptyState.style.display = hasVisiblePosts ? 'none' : 'block';
      }
      
      // Hide year headings with no visible posts
      document.querySelectorAll('section').forEach(section => {
        const hasVisibleArticles = Array.from(section.querySelectorAll('article'))
          .some(article => article.style.display !== 'none');
        section.style.display = hasVisibleArticles ? 'block' : 'none';
      });
    }
    
    tagFilters.forEach(filter => {
      filter.addEventListener('click', () => {
        // Update selected state
        tagFilters.forEach(f => f.classList.remove('selected'));
        filter.classList.add('selected');
        
        // Filter posts
        const tag = (filter as HTMLElement).dataset.tag || 'all';
        filterPosts(tag);
      });
    });
  }

  // Setup on initial load and after navigation
  document.addEventListener('astro:page-load', setupTagFilters);
</script>